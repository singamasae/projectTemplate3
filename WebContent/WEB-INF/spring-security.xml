<?xml version="1.0" encoding="UTF-8" ?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd 
	http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd">

	<http pattern="/js/**/*" security="none" />
	<http pattern="/libs/**/*" security="none" />
	<http pattern="/css/**/*" security="none" />

	<!-- This is default url to get a token from OAuth -->
	<http use-expressions="false" pattern="/oauth/token"
		create-session="stateless" authentication-manager-ref="clientAuthenticationManager">
		<intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<anonymous enabled="false" />
		<http-basic entry-point-ref="clientAuthenticationEntryPoint" />
		<!-- include this only if you need to authenticate clients via request 
			parameters -->
		<custom-filter ref="clientCredentialsTokenEndpointFilter"
			after="BASIC_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
		<csrf disabled="true" />
	</http>

	<!-- This is where we tells spring security what URL should be protected 
		and what roles have access to them -->
	<http use-expressions="false" auto-config="false" pattern="/api/**"
		create-session="never" entry-point-ref="oauthAuthenticationEntryPoint"
		access-decision-manager-ref="accessDecisionManager">
		<anonymous enabled="false" />
		<intercept-url pattern="/api/**" access="ROLE_USER" />
		<custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
		<csrf disabled="true" />
	</http>

	<beans:bean id="oauthAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<beans:property name="realmName" value="test" />
	</beans:bean>

	<beans:bean id="clientAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<beans:property name="realmName" value="test/client" />
		<beans:property name="typeName" value="Basic" />
	</beans:bean>

	<beans:bean id="oauthAccessDeniedHandler"
		class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<beans:bean id="clientCredentialsTokenEndpointFilter"
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<beans:property name="authenticationManager" ref="clientAuthenticationManager" />
	</beans:bean>

	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased"
		xmlns="http://www.springframework.org/schema/beans">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<bean class="org.springframework.security.access.vote.RoleVoter" />
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</list>
		</constructor-arg>
	</bean>

	<authentication-manager id="clientAuthenticationManager">
		<authentication-provider user-service-ref="clientDetailsUserService" />
	</authentication-manager>

	<!-- authetication manager get user from database -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="myUserDetailsService">
			<password-encoder ref="bCryptPasswordEncoder" />
		</authentication-provider>
	</authentication-manager>

	<!-- Create client details bean for manage client details from database -->
	<!-- The JdbcClientDetailsService provide default implementation for fetching 
		the data from oauth_client_details table Other wise we need to create our 
		custom class that Implement ClientDetailsService Interface and override its 
		loadClientByClientId method -->
	<beans:bean id="clientDetails"
		class="org.springframework.security.oauth2.provider.client.JdbcClientDetailsService">
		<beans:constructor-arg index="0" ref="dataSource" />
	</beans:bean>

	<beans:bean id="clientDetailsUserService"
		class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<beans:constructor-arg ref="clientDetails" />
	</beans:bean>

	<!-- Oauth Token Service Using Database -->
	<!-- The JdbcTokenStore class provide the default implementation from access 
		the token from database. If we want to customize the JDBC implementation 
		we need to implement TokenStore interface and overrider its methods -->
	<beans:bean id="tokenStore"
		class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore">
		<beans:constructor-arg ref="dataSource" />
	</beans:bean>

	<!-- This is where we defined token based configurations, token validity 
		and other things -->
	<beans:bean id="tokenServices"
		class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<beans:property name="tokenStore" ref="tokenStore" />
		<beans:property name="supportRefreshToken" value="true" />
		<beans:property name="accessTokenValiditySeconds"
			value="120" />
		<beans:property name="clientDetailsService" ref="clientDetails" />
	</beans:bean>

	<beans:bean id="userApprovalHandler"
		class="org.springframework.security.oauth2.provider.approval.DefaultUserApprovalHandler">
	</beans:bean>

	<oauth2:authorization-server
		client-details-service-ref="clientDetails" token-services-ref="tokenServices"
		user-approval-handler-ref="userApprovalHandler">
		<oauth2:authorization-code />
		<oauth2:implicit />
		<oauth2:refresh-token />
		<oauth2:client-credentials />
		<oauth2:password />
	</oauth2:authorization-server>

	<oauth2:resource-server id="resourceServerFilter"
		resource-id="test" token-services-ref="tokenServices" />

	<sec:global-method-security
		pre-post-annotations="enabled" proxy-target-class="true">
		<!--you could also wire in the expression handler up at the layer of the 
			http filters. See https://jira.springsource.org/browse/SEC-1452 -->
		<sec:expression-handler ref="oauthExpressionHandler" />
	</sec:global-method-security>

	<oauth2:expression-handler id="oauthExpressionHandler" />
	<oauth2:web-expression-handler id="oauthWebExpressionHandler" />

	<beans:bean id="myUserDetailsService"
		class="com.project.template.services.security.MyUserDetailsService" />
	<beans:bean id="bCryptPasswordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

</beans:beans>